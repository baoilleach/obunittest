import pybel
import sweet



class TestCase(sweet.TestCase):
    """Regression Test for PR2694300

    Inversion of stereochemistry when reading the SMILES derived
    from the supplied mol file.

    The spiro example in the bug report is dealt with in PR1805910.py
    """
    def setUp(self):
        self.mol = pybel.readfile("mol", "PR2694300_14995.mol").next()
        self.serialised = {
 'atoms': [{'atomicnum': 6,
            'coords': (1.1035999999999999,
                       -1.1658999999999999,
                       1.5455000000000001),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 6,
            'coords': (-0.041099999999999998,
                       -2.0411000000000001,
                       2.0602999999999998),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 6,
            'coords': (2.4599000000000002, -1.8882000000000001, 1.6508),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 6,
            'coords': (-1.3795999999999999, -1.2947, 2.1621999999999999),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 6,
            'coords': (2.6926000000000001, -2.8506, 0.48759999999999998),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 6,
            'coords': (0.80769999999999997, -0.71389999999999998, 0.1386),
            'type': 'C2',
            'valence': 3},
           {'atomicnum': 6,
            'coords': (2.6126, -2.1282000000000001, -0.85880000000000001),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 6,
            'coords': (1.4927999999999999, -1.1348, -0.93369999999999997),
            'type': 'C2',
            'valence': 3},
           {'atomicnum': 6,
            'coords': (-1.8425, -0.87709999999999999, 0.76439999999999997),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 6,
            'coords': (-1.2966, -0.065199999999999994, 3.0678000000000001),
            'type': 'C3',
            'valence': 4},
           {'atomicnum': 1,
            'coords': (1.1956, -0.27529999999999999, 2.1777000000000002),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-0.16719999999999999, -2.9296000000000002, 1.4277),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (0.216, -2.4150999999999998, 3.0602),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (3.2641, -1.1398999999999999, 1.6495),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (2.5400999999999998, -2.4251, 2.6032000000000002),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-2.1143999999999998, -1.992, 2.5840999999999998),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (3.6730999999999998,
                       -3.3298999999999999,
                       0.58850000000000002),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (1.9466000000000001,
                       -3.6541999999999999,
                       0.51849999999999996),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (0.1898, 0.15870000000000001, -0.0253),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (2.4956999999999998,
                       -2.8702999999999999,
                       -1.6566000000000001),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (3.5545, -1.5995999999999999, -1.0484),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (1.2983, -0.67620000000000002, -1.8992),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-1.5518000000000001,
                       -1.5697000000000001,
                       -0.030800000000000001),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-2.9418000000000002,
                       -0.92010000000000003,
                       0.76770000000000005),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-1.6458999999999999,
                       0.16830000000000001,
                       0.51629999999999998),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-2.2993000000000001,
                       0.34360000000000002,
                       3.2364000000000002),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-0.87870000000000004,
                       -0.32900000000000001,
                       4.0449000000000002),
            'type': 'HC',
            'valence': 1},
           {'atomicnum': 1,
            'coords': (-0.69069999999999998, 0.7389, 2.6394000000000002),
            'type': 'HC',
            'valence': 1}],
 'bonds': [{'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 2},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1},
           {'bo': 1}]}
    def testIdentity(self):
        self.assertSameMol(self.mol, self.serialised)
    def testReadSmi(self):
        can = self.mol.write("can")
        smi = self.mol.write("smi")
        fromsmi = pybel.readstring("smi", smi)
        fromcan = pybel.readstring("smi", can)
        self.assertEqual(can, fromsmi.write("can"))
        self.assertEqual(can, fromcan.write("can"))
